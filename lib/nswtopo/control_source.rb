module NSWTopo
  class ControlSource < Source
    include VectorRenderer
    include NoCreate
    
    def initialize(*args)
      super(*args)
      @path = Pathname.new(params["path"]).expand_path
      params["labels"]["margin"] ||= params["diameter"] * 0.707
    end
    
    def types_waypoints
      gps_waypoints = GPS.new(path).waypoints
      [ [ /\d{2,3}/, :controls  ],
        [ /HH/,      :hashhouse ],
        [ /ANC/,     :anc       ],
        [ /W/,       :water     ],
      ].map do |selector, type|
        waypoints = gps_waypoints.map do |waypoint, name|
          [ waypoint, name[selector] ]
        end.select(&:last)
        [ type, waypoints ]
      end
    rescue BadGpxKmlFile => e
      raise BadLayerError.new("#{e.message} not a valid GPX or KML file")
    end
    
    def draw(map)
      radius = 0.5 * params["diameter"]
      spot_diameter = params["spot-diameter"]
      
      group = yield
      types_waypoints.each do |type, waypoints|
        group.add_element("g", "class" => type) do |group|
          waypoints.map do |waypoint, label|
            point = map.coords_to_mm(map.reproject_from_wgs84(waypoint)).round(MM_DECIMAL_DIGITS)
            transform = "translate(#{point.join ?\s}) rotate(#{-map.rotation})"
            case type
            when :controls
              group.add_element("circle", "r" => radius, "fill" => "none", "transform" => transform)
              group.add_element("circle", "r" => 0.5 * spot_diameter, "stroke" => "none", "transform" => transform) if spot_diameter
            when :hashhouse, :anc
              angles = type == :hashhouse ? [ -90, -210, -330 ] : [ -45, -135, -225, -315 ]
              d = angles.map do |angle|
                [ radius, 0 ].rotate_by_degrees(angle)
              end.to_path_data(MM_DECIMAL_DIGITS, ?Z)
              group.add_element("path", "d" => d, "fill" => "none", "transform" => transform)
            when :water
              [
                "m -0.79942321,0.07985921 -0.005008,0.40814711 0.41816285,0.0425684 0,-0.47826034 -0.41315487,0.02754198 z",
                "m -0.011951449,-0.53885114 0,0.14266384",
                "m 0.140317871,-0.53885114 0,0.14266384",
                "m -0.38626833,0.05057523 c 0.0255592,0.0016777 0.0370663,0.03000538 0.0613473,0.03881043 0.0234708,0.0066828 0.0475564,0.0043899 0.0713631,0.0025165 0.007966,-0.0041942 0.0530064,-0.03778425 0.055517,-0.04287323 0.0201495,-0.01674888 0.0473913,-0.05858754 0.0471458,-0.08232678 l 0.005008,-0.13145777 c 2.5649e-4,-0.006711 -0.0273066,-0.0279334 -0.0316924,-0.0330336 -0.005336,-0.006207 0.006996,-0.0660504 -0.003274,-0.0648984 -0.0115953,-0.004474 -0.0173766,5.5923e-4 -0.0345371,-0.007633 -0.004228,-0.0128063 -0.006344,-0.0668473 0.0101634,-0.0637967 0.0278325,0.001678 0.0452741,0.005061 0.0769157,-0.005732 0.0191776,0 0.08511053,-0.0609335 0.10414487,-0.0609335 l 0.16846578,8.3884e-4 c 0.0107679,0 0.0313968,0.0284032 0.036582,0.03359 0.0248412,0.0302766 0.0580055,0.0372558 0.10330712,0.0520893 0.011588,0.001398 0.0517858,-0.005676 0.0553021,0.002517 0.007968,0.0265354 0.005263,0.0533755 0.003112,0.0635227 -0.002884,0.0136172 -0.0298924,-1.9573e-4 -0.0313257,0.01742 -0.001163,0.0143162 -4.0824e-4,0.0399429 -0.004348,0.0576452 -0.0239272,0.024634 -0.0529159,0.0401526 -0.0429639,0.0501152 l -6.5709e-4,0.11251671 c 0.003074,0.02561265 0.0110277,0.05423115 0.0203355,0.07069203 0.026126,0.0576033 0.0800901,0.05895384 0.0862871,0.06055043 0.002843,8.3885e-4 0.24674425,0.0322815 0.38435932,0.16401046 0.0117097,0.0112125 0.0374559,0.0329274 0.0663551,0.12144199 0.0279253,0.0855312 0.046922,0.36424768 0.0375597,0.36808399 -0.0796748,0.0326533 -0.1879149,0.0666908 -0.31675221,0.0250534 -0.0160744,-0.005201 0.001703,-0.11017354 -0.008764,-0.16025522 -0.0107333,-0.0513567 3.4113e-4,-0.15113981 -0.11080061,-0.17089454 -0.0463118,-0.008221 -0.19606469,0.0178953 -0.30110236,0.0400631 -0.05001528,0.0105694 -0.117695,0.0171403 -0.15336817,0.0100102 -0.02204477,-0.004418 -0.15733412,-0.0337774 -0.18225582,-0.0400072 -0.0165302,-0.004138 -0.053376,-0.006263 -0.10905742,0.0111007 -0.0413296,0.0128902 -0.0635168,0.0443831 -0.0622649,0.0334027 9.1434e-4,-0.008025 0.001563,-0.46374837 -1.0743e-4,-0.47210603 z",
                "m 0.06341799,-0.8057541 c -0.02536687,-2.7961e-4 -0.06606003,0.0363946 -0.11502538,0.0716008 -0.06460411,0.0400268 -0.1414687,0.0117718 -0.20710221,-0.009675 -0.0622892,-0.0247179 -0.16166212,-0.004194 -0.17010213,0.0737175 0.001686,0.0453982 0.0182594,0.1160762 0.0734356,0.11898139 0.0927171,-0.0125547 0.18821206,-0.05389 0.28159685,-0.0236553 0.03728388,0.0164693 0.0439921,0.0419813 0.04709758,0.0413773 l 0.18295326,0 c 0.003105,5.5923e-4 0.009814,-0.0249136 0.0470976,-0.0413773 0.0933848,-0.0302347 0.18887978,0.0111007 0.2815969,0.0236553 0.0551762,-0.002908 0.0718213,-0.0735832 0.0735061,-0.11898139 -0.00844,-0.0779145 -0.10788342,-0.0984409 -0.17017266,-0.0737175 -0.0656335,0.0214464 -0.14249809,0.0497014 -0.20710215,0.009675 -0.0498479,-0.0358409 -0.09110973,-0.0731946 -0.11636702,-0.0715309 -4.5577e-4,-3.076e-5 -9.451e-4,-6.432e-5 -0.001412,-6.991e-5 z",
                "m -0.20848487,-0.33159571 c 0.29568578,0.0460357 0.5475498,0.0168328 0.5475498,0.0168328",
                "m -0.21556716,-0.26911875 c 0.29568578,0.0460329 0.55463209,0.0221175 0.55463209,0.0221175",
              ].each do |d|
                d.gsub!(/\d+\.\d+/) { |number| number.to_f * radius * 0.8 }
                group.add_element("path", "fill" => "none", "d" => d, "transform" => transform)
              end
            end
          end
        end
      end if group
    end
    
    def labels(map)
      types_waypoints.reject do |type, waypoints|
        type == :water
      end.map do |type, waypoints|
        waypoints.map do |waypoint, label|
          { "dimension" => 0, "data" => [ map.reproject_from_wgs84(waypoint) ], "labels" => label, "categories" => type }
        end
      end.flatten(1)
    end
  end
end
