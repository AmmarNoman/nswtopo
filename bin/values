#!/usr/bin/env ruby

# dodgy utility for extracting attribute values from various server protocols
require 'uri'
require 'open-uri'
require 'json'
require 'net/http'
require 'uri'
require 'cgi'
require 'pathname'
require 'ostruct'

class Hash
  def to_query
    reject { |key, value| value.nil? }.map { |args| args.map(&:to_s).map { |text| CGI.escape text }.join ?= }.join ?&
  end
end

def show_arcgis(url, *args, dynamic, where, referer)
  open "#{url}?f=json", "Referer" => referer || url do |json|
    response = JSON.parse(json.read)
    case
    when response["fields"] # inspect layer
      puts "%s (%s)" % response.values_at("name", "geometryType")
      response["fields"].each do |field|
        puts "  %25s (type: %s, alias: %s)" % field.values_at("name", "type", "alias")
      end
    when response["layers"] # inspect service
      indent = {}
      response["layers"].map do |layer|
        layer.values_at *%w[id parentLayerId name]
      end.each do |id, parent, name|
        indent[id] = !parent ? 0 : parent == -1 ? 0 : 2 + indent[parent]
      end.each do |id, parent, name|
        puts "%4d:#{?\s * indent[id]} %s" % [ id, name ]
      end
    when response["folders"] || response["services"] # inspect services
      [ *response["folders"] ].each do |folder|
        puts [ url, folder ].join ?/
      end
      [ *response["services"] ].each do |service|
        puts [ url, service["name"].split(?/).last, service["type"] ].join ?/
      end
    end
  end and return unless args.any?
  query = {
    "f" => "json",
    "where" => where,
    "classificationDef" => {
      "type" => "uniqueValueDef",
      "uniqueValueFields" => [ *args ],
      "fieldDelimiter" => ?|,
    }.to_json
  }
  if dynamic
    layer = {
      "source" => {
        "type" => "mapLayer",
        "mapLayerId" => url[/\d+$/]
      },
      "definitionExpression" => query.delete("where")
    }
    url = url.sub /\d+$/, "dynamicLayer"
    query.merge! "layer" => layer.to_json
  end
  open "#{url}/generateRenderer?#{query.to_query}", "Referer" => referer || url do |json|
    response = JSON.parse(json.read)
    abort [ response["error"]["message"], *response["error"]["details"] ].join(?\n) if response["error"]
    values = response["uniqueValueInfos"].map do |info|
      info["value"].split(?|).map do |value|
        value && value =~ /\s*[\n\r]+|\s+$/ ? value.inspect : value
      end
    end
    counts = response["uniqueValueInfos"].map do |info|
      info["count"]
    end
    show = lambda do |values_counts = values.zip(counts), index = 0, indent = 0|
      values_counts.group_by do |tuple, count|
        tuple.take(index + 1)
      end.sort_by(&:first).each do |(*, value), values_counts|
        count = values_counts.transpose.last.inject(0, &:+)
        puts "%8d: %s%s" % [ count, ?\s * indent, value || "(NULL)" ]
        show.call values_counts, index + 1, indent + 2 unless values_counts.one?
      end
    end
    show.call
  end
end

def show_wfs(url, name, field, *fields, values, filter)
  uri = URI.parse url
  query = {
    "service" => "wfs",
    "version" => "2.0.0",
    "request" => "GetFeature",
    "typeNames" => name,
    "count" => 1,
    "startIndex" => 0,
    "outputFormat" => "application/json",
  }

  filters = []
  loop do
    cql_filter = [ *filter, *filters ].join " AND "
    cql_filter.empty? ? query.delete("cql_filter") : query.merge!("cql_filter" => cql_filter)
    uri.query = query.to_query
    post = Net::HTTP::Get.new(uri.request_uri)
    use_ssl = uri.scheme == "https"
    json = Net::HTTP.start(uri.host, uri.port, :use_ssl => use_ssl, :read_timeout => 600) { |http| http.request(post).body }
    feature = JSON.parse(json)["features"][0]
    break unless feature

    value = feature["properties"][field]
    filters << case value
    when nil    then "(#{field} IS NOT NULL)"
    when String then "(#{field} NOT IN ('#{value}'))"
    else             "(#{field} NOT IN (#{value}))"
    end

    value_filter = case value
    when nil    then "(#{field} IS NULL)"
    when String then "(#{field} IN ('#{value}'))"
    else             "(#{field} IN (#{value}))"
    end

    puts "%s%s" % [ "   " * values.length, value || "(null)" ]
    if fields.any?
      show_wfs(url, name, *fields, [ *values, value ], [ *filter, value_filter ].join(" AND "))
    end
  end
end

def show_shapefile(*args, values, where)
  path, layer, *attributes = args
  if attributes.none?
    where = %Q[-where "#{where}"] if where
    puts %x[ogrinfo #{where} -ro -so "#{path}" #{layer}]
    return
  end
  where = %Q[WHERE #{where}] if where
  attribute_list = attributes.join ?,
  sql = %Q[SELECT #{attribute_list}, COUNT(*) AS count FROM '#{layer}' #{where} GROUP BY #{attribute_list} ORDER BY #{attribute_list}]
  json = %x[ogr2ogr -f GeoJSON -dialect sqlite -sql "#{sql}" /vsistdout/ "#{path}"]
  rows = JSON.parse(json)["features"].map do |feature|
    OpenStruct.new feature["properties"]
  end
  show = lambda do |rows, (attribute, *attributes), indent = 0|
    rows.group_by do |row|
      row[attribute]
    end.each do |value, rows|
      count = rows.map(&:count).inject(&:+)
      puts "%8d: %s%s" % [ count, ?\s * indent, value || "(NULL)" ]
      show.(rows, attributes, indent + 2)
    end if attribute
  end
  show.(rows, attributes)
end

dynamic = ARGV.delete "-dynamic"
where = ARGV.each_cons(2).find.with_index do |(flag, argument), index|
  ARGV.slice! index, 2 if flag == "-where"
end&.last
referer = ARGV.each_cons(2).find.with_index do |(flag, argument), index|
  ARGV.slice! index, 2 if flag == "-referer"
end&.last

case
when ARGV[0] =~ /\/MapServer|\/FeatureServer|\/rest\/services/ then show_arcgis(*ARGV, dynamic, where, referer)
when ARGV[0] =~ /wfs/i then show_wfs(*ARGV, [], where && "(#{where})")
else show_shapefile(*ARGV, [], where)
end
